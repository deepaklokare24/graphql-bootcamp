type User {
  id: ID!
  name: String!
  email: String
  age: Int
  employed: Boolean!
  gpa: Float
  posts: [Post!]!
  comments: [Comment!]!
}
type Product {
  id: ID!
  title: String!
  price: Float!
  releaseYear: Int
  rating: Float
  inStock: Boolean!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  postId: Int!
  userId: Int!
  author: User!
  post: Post!
}
type Query {
  hello: String!
  message: String!
  location: String!
  bio: String!
  person: User!
  product: Product!
  post: Post!
  greeting(name: String): String!
  add(numbers: [Float!]!): Float!
  grades: [Int!]!
  users(searchStr: String): [User!]!
  posts(searchStr: String): [Post!]!
  comments(postId: ID): [Comment!]!
}

type Mutation {
  creaetUser(payload: CreateUserInput): User!
  deleteUser(userId: ID!): User!
  createPost(payload: CreatePostInput): Post!
  deletePost(postId: ID!): Post!
  createComment(payload: CreateCommentInput): Comment!
  deleteComment(commentId: ID!): Comment!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
  employed: Boolean!
  gpa: Float
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}

input CreateCommentInput {
  text: String!
  userId: ID!
  postId: ID!
}
